# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-07-12 14:03


from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('active', models.BooleanField(default=False, help_text=b'Whether the email is active or not. Inactive emails will not be sent')),
                ('title', models.CharField(help_text=b'Internal identifier of the email', max_length=100)),
                ('subject', models.CharField(help_text=b'Subject of the email', max_length=998)),
                ('source_html_uri', models.URLField(help_text=b'Source URI of the email HTML')),
                ('source_text_uri', models.URLField(blank=True, help_text=b'Source URI of the email text', null=True)),
                ('start_date', models.DateField(help_text=b'Format: %Y-%m-%d, %m/%d/%Y or %m/%d/%y. Date that the email will first be sent.')),
                ('send_time', models.TimeField(help_text=b'Format: %H:%M or %H:%M:%S. Time of day when the email will be sent. Times will be rounded to the nearest quarter hour.')),
                ('recurrence', models.SmallIntegerField(blank=True, choices=[(0, b'Never'), (1, b'Daily'), (2, b'Weekly'), (3, b'Biweekly'), (4, b'Monthly')], default=0, help_text=b'If and how often the email will be resent.', null=True)),
                ('from_email_address', models.CharField(help_text=b'Email address from where the sent emails will originate', max_length=256)),
                ('from_friendly_name', models.CharField(blank=True, help_text=b'A display name associated with the from email address', max_length=100, null=True)),
                ('replace_delimiter', models.CharField(default=b'!@!', help_text=b'Character(s) that replacement labels are wrapped in.', max_length=10)),
                ('track_urls', models.BooleanField(default=True, help_text=b'Rewrites all URLs in the email content to be recorded')),
                ('track_opens', models.BooleanField(default=True, help_text=b'Adds a tracking image to email content to track if and when an email is opened.')),
                ('preview', models.BooleanField(default=True, help_text=b'BE CAREFUL! Un-checking this value will disable sending the preview email. In some cases, if un-checked, this will cause a live email to be sent on the next send cycle.\nSend a preview to a specific set of individuals allowing them to proof the content.')),
                ('preview_recipients', models.TextField(blank=True, help_text=b'A comma-separated list of preview recipient email addresses', null=True)),
                ('preview_est_time', models.DateTimeField(null=True)),
                ('live_est_time', models.DateTimeField(null=True)),
                ('send_override', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now_add=True)),
                ('creator', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='created_email', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['title'],
            },
        ),
        migrations.CreateModel(
            name='Instance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_html', models.TextField()),
                ('litmus_id', models.CharField(blank=True, max_length=100, null=True)),
                ('requested_start', models.DateTimeField()),
                ('start', models.DateTimeField(auto_now_add=True)),
                ('end', models.DateTimeField(null=True)),
                ('success', models.NullBooleanField(default=None)),
                ('opens_tracked', models.BooleanField(default=False)),
                ('urls_tracked', models.BooleanField(default=False)),
                ('send_terminate', models.BooleanField(default=False)),
                ('email', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances', to='manager.Email')),
            ],
            options={
                'ordering': ('-start',),
            },
        ),
        migrations.CreateModel(
            name='InstanceOpen',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('is_reopen', models.BooleanField(default=False)),
                ('instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='opens', to='manager.Instance')),
            ],
        ),
        migrations.CreateModel(
            name='InstanceRecipientDetails',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(null=True)),
                ('exception_msg', models.TextField(blank=True, null=True)),
                ('instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='recipient_details', to='manager.Instance')),
            ],
        ),
        migrations.CreateModel(
            name='PreviewInstance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sent_html', models.TextField()),
                ('recipients', models.TextField()),
                ('requested_start', models.DateTimeField()),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('lock_content', models.BooleanField(default=False)),
                ('email', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='previews', to='manager.Email')),
            ],
            options={
                'ordering': ('-when',),
            },
        ),
        migrations.CreateModel(
            name='Recipient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_address', models.CharField(max_length=255, unique=True)),
                ('disable', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['email_address'],
            },
        ),
        migrations.CreateModel(
            name='RecipientAttribute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('value', models.CharField(blank=True, max_length=1000)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attributes', to='manager.Recipient')),
            ],
        ),
        migrations.CreateModel(
            name='RecipientGroup',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('recipients', models.ManyToManyField(related_name='groups', to='manager.Recipient')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Setting',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=80)),
                ('value', models.CharField(max_length=200)),
            ],
        ),
        migrations.CreateModel(
            name='URL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=2000)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('position', models.PositiveIntegerField(default=0)),
                ('instance', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls', to='manager.Instance')),
            ],
        ),
        migrations.CreateModel(
            name='URLClick',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('when', models.DateTimeField(auto_now_add=True)),
                ('recipient', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='urls_clicked', to='manager.Recipient')),
                ('url', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='clicks', to='manager.URL')),
            ],
        ),
        migrations.AddField(
            model_name='instancerecipientdetails',
            name='recipient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instance_receipts', to='manager.Recipient'),
        ),
        migrations.AddField(
            model_name='instanceopen',
            name='recipient',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='instances_opened', to='manager.Recipient'),
        ),
        migrations.AddField(
            model_name='instance',
            name='recipients',
            field=models.ManyToManyField(through='manager.InstanceRecipientDetails', to='manager.Recipient'),
        ),
        migrations.AddField(
            model_name='email',
            name='recipient_groups',
            field=models.ManyToManyField(help_text=b'Which group(s) of recipients this email will go to.', related_name='emails', to='manager.RecipientGroup'),
        ),
        migrations.AddField(
            model_name='email',
            name='unsubscriptions',
            field=models.ManyToManyField(related_name='unsubscriptions', to='manager.Recipient'),
        ),
        migrations.AlterUniqueTogether(
            name='recipientattribute',
            unique_together=set([('recipient', 'name')]),
        ),
    ]
